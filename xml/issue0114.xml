<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="114" status="Open">
<title>
N4029 Let return Be Direct and explicit N3452 (unpublished) Let {x,y,z} => explicit
</title>
<section><sref ref="[stmt.return]"/></section>
<submitter>Herb Sutter</submitter>
<date>09 Apr 2014</date>

<discussion>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/papers/2014/n4029.pdf">http://open-std.org/JTC1/SC22/WG21/docs/papers/2014/n4029.pdf</a>
</p>
<p>
See <a href="http://wiki.edg.com/twiki/pub/Wg21portland2012/EvolutionWorkingGroup/N3452.pdf">unpublished paper N3452</a>.
</p>
<p>
Portland 2012:
<p>Straw polls:</p>
<p>return as in the proposal: SF: 3 F: 2 N: 2 A: 4 SA: 5</p>
<p>arguments as in the proposal: SF: 2 F: 2 N: 1 A: 4 SA: 7</p>
<p>= {} vs. {} as in the proposal: SF: 2 F: 0 N: 4 A: 4 SA: 5</p>
<p>The author interprets these as dead, and does not plan to pursue this further.</p>
</p>
<p>
Sutter reopened the issue in [c++std-ext-14770], Lavavej and Voutilainen
reiterated reasons why the proposal was originally rejected. Sutter has
indicated that he wishes to create a revised paper focusing on the return
part, this issue is for him to reference in the paper.
</p>
<p>
Hinnant pointed to <a href="http://htmlpreview.github.io/?https://github.com/HowardHinnant/papers/blob/master/return_direct.html">his response writeup</a> in [c++std-ext-14883], and it was noted that [c++std-lib-34985] is also related, and mentions <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3739.html">a paper by Kr&uuml;gler</a> that would solve some of the library issues
without introducing the problems Hinnant writes about.
</p>
<p>
Dimov presented a different incarnation of some of these problems in
[c++std-lib-36408] "map&lt;K,V>::emplace and explicit V constructors", and
Kr&uuml;gler pointed out his paper solves that issue as well.
</p>
<p>
The Library issue related to Dimov's issue report is
<a href="http://cplusplus.github.io/LWG/lwg-toc.html#2397">LWG 2397</a>
</p>
<p>
Discussed in Rapperswil 2014. 
</p>
<p>
Vandevoorde pointed out that he doesn't like returning an integer value and 
having that automatically convert to a vector. Vandevoorde said that the same 
arguments apply as with Josuttis's paper, because there's a difference between 
conversions and initializations, and that there are differences with auto. 
Sutter and Stroustrup suggested that the function author should know the 
return type of their function, so the argument that the return type 
isn't known doesn't hold water.
</p>
<p>
Voutilainen pointed out that there is a difference between initializations 
of local variables and returns, since the former allows deciding whether 
conversions are allowed, whereas this proposal would remove the ability to 
make that decision for returns.
</p>
<p>Dennett thought that the diagnostic is not problematic because the worst 
kind of diagnostic is a missing diagnostic, especially ones that change a 
compiler error to a runtime error. Dennett asked what happens if a function 
vector f() {return {42};} has new semantics, and Vandevoorde warned that 
it seems like this would be a breaking change.
</p>
<p>Voutilainen emphasized that this will turn compile-time errors into 
run-time errors, and warned about doing that lightly. Vandevoorde thought 
that this proposal makes code easier to write but not easier to read. 
Stroustrup disagreed with that point. 
</p>
<p>Voutilainen emphasized that in his opinion ownership transfer needs to 
stand out. Bos asked whether a compromise like return auto(2); would work. 
Dennett reported he has a wrap_unique() in internal use that solves the 
problem of having to repeat the type. Vandevoorde explained the difference 
between returning a value and returning a value constructed (possibly 
via conversion) from another value. Naumann pointed out the problems in 
refactoring code that returns a value but is changed to return eg. a vector, 
the status quo currently diagnoses those, but with this proposal, 
that wouldn't be the case. 
</p>
<p>Straw polls:</p>
<p>Proposal:</p>
<p>SF: 2 F: 5 N: 4 A: 3 SA: 5</p>
<p>Like the proposal, but just when braces are used:</p>
<p>SF: 3 F: 8 N: 3 A: 0 SA: 4</p>
<p>Sutter continued revising the proposal aiming for a solution
that kicks in when braces are used. The current expectation
is that the discussion will continue in Urbana, and there
will be more papers related to this area.</p>
</discussion>
</issue>
