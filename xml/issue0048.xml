<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="48" status="Open">
<title>
N3867, N3730 Specializations and namespaces (was "Specializing templates in different namespaces" before the paper)
</title>
<section><sref ref="[temp.expl.spec]"/></section>
<submitter>Mike Spertus</submitter>
<date>06 Mar 2013</date>

<discussion>
<p>
<a href="http://open-std.org/JTC1/SC22/WG21/docs/papers/2014/n3867.html">http://open-std.org/JTC1/SC22/WG21/docs/papers/2014/n3867.html</a>
</p>
<p>
<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3730.html">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3730.html</a>
</p>
<p>
There is a closed (extension status) Core issue for this, see <a href="http://open-std.org/JTC1/SC22/WG21/docs/cwg_toc.html#1077">Core issue 1077</a>.
</p>
<p>
This is a proposal to allow specializing templates from within a different namespace. The motivation is that when we declare a new class, it is natural to want to provide associated template specializations. For example, it is really painful that whenever I declare a class, I need to leave my namespace and enter namespace std just to specialize std::less as shown below

<pre>
  namespace A {
    namespace B {
      class C {...};
    }
  }

  namespace std {
    template &lt;&gt;
    struct less&lt;C&gt; : binary_function &lt;C, C, bool&gt; {
       bool operator() (const C &amp; x, const C &amp; y) const {...}
   };
  }

  namespace A {
    namespace B {
      ... // Continue working in A::B
    }
  }
</pre>
 

Instead, I should be able to specialize std::less without having to break out of my namespace:

<pre> 
  namespace A {
    namespace B {
      class C {...};
      template &lt;&gt;
      struct ::std::less&lt;C&gt; : binary_function &lt;C, C, bool&gt; {
        bool operator() (const C &amp; x, const C &amp; y) const {...}
      };
    ... // Continue working in A::B
    }
  }
</pre>
</p>
<p>
Bristol 2013:  Stroustrup expressed concern about unqualified name lookup in the specializations, and Voutilainen thought that that just might be the reason why the current rules don't allow it. Gottschling voiced concern about the implementation impact, and Voutilainen suggested asking for a quick review of the overall idea from Spicer. Austern thought that this could be palatable if it's expressed as a set of rewrite rules. Spertus asked about an alternative which is to be able to open another namespace without having to exit the current namespace. This alternative didn't gain success.

Spertus to write a paper. 
</p>
<p>
In Chicago 2013, EWG guidance was to work based on the current proposal N3730 without the facility of specializing a namespace-scoped template from inside a class. 
</p>

</discussion>
</issue>
