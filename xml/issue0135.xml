<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="135" status="New">
<title>
[tiny] Mutable is part of a lambda-declarator, so when a lambda is mutable, the parentheses aren't optional
</title>
<section><sref ref="[expr.prim.lambda]"/></section>
<submitter>Herb Sutter</submitter>
<date>02 Jul 2014</date>

<discussion>
<p>
It has been reported that various people have noticed that it's possible to write</p>
<pre>
<code>
auto lambda = []{};
</code>
</pre>
<p>but not</p>
<pre>
<code>
auto lambda2 = [] mutable {};
</code>
</pre>
<p>
In the mutable case, parentheses are required, thus:
</p>
<pre>
<code>
auto lambda3 = []() mutable {};
</code>
</pre>
<p>
The proposed consistency fix is to change the grammar to allow omitting the parentheses
for mutable lambdas as well.
</p>
<resolution>
<p>Change in [expr.prim.lambda]/1:</p>
<pre>
lambda-expression:
    lambda-introducer <ins><code>mutable<sub>opt</sub></code> </ins>lambda-declarator<sub>opt</sub> compound-statement
</pre>
<p>Change in [expr.prim.lambda]/4:</p>
<pre>
<ins>If the <em>lambda-introducer</em> is followed by <code>mutable</code>, the <em>lambda-expression</em> shall not include a <em>lambda-declarator</em>. </ins>
If a <em>lambda-expression</em> does not include a <em>lambda-declarator</em>, it is as if the <em>lambda-declarator</em> were ().
</pre>
<p>Change in [expr.prim.lambda]/5:</p>
<pre>
This function call operator or operator template is declared const (9.3.1) if and only if
the <ins><em>lambda-declarator</em>'s</ins><del><em>lambda-expression</em>'s</del> <em>parameter-declaration-clause</em> is not followed by <code>mutable</code><ins> and the <em>lambda-introducer</em> is not followed by <code>mutable</code></ins>.
</pre>

</resolution>
</discussion>
</issue>
