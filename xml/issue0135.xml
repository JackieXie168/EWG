<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<!DOCTYPE issue SYSTEM "lwg-issue.dtd" [ 
  <!ENTITY nbsp "&#160;">
] >

<issue num="135" status="New">
<title>
[tiny] Mutable is part of a lambda-declarator, so when a lambda is mutable, the parentheses aren't optional
</title>
<section><sref ref="[expr.prim.lambda]"/></section>
<submitter>Herb Sutter</submitter>
<date>02 Jul 2014</date>

<discussion>
<p>
It has been reported that various people have noticed that it's possible to write</p>
<pre>
<code>
auto lambda = []{};
</code>
</pre>
<p>but not</p>
<pre>
<code>
auto lambda2 = [] mutable {};
</code>
</pre>
<p>
In the mutable case, parentheses are required, thus:
</p>
<pre>
<code>
auto lambda3 = []() mutable {};
</code>
</pre>
<p>
The proposed consistency fix is to change the grammar to allow omitting the parentheses
for mutable lambdas as well.
</p>
<p>
An additional question EWG needs to decide is whether the empty parentheses
could be omitted for other cases besides mutable, such as</p>
<p>
<pre>
<code>
[] -> float {return 42;};
[] noexcept {foo();};
</code>
</pre>
</p>
</discussion>
<resolution>
<strong> Change the grammar in 5.1.2 [expr.prim.lambda] paragraph 1</strong>

<blockquote>
<pre><em>
lambda-expression:
      lambda-introducer lambda-declarator<del><sub>opt</sub></del> compound-statement
...

lambda-declarator:
      ( parameter-declaration-clause ) mutable<sub>opt</sub>
            exception-specification<sub>opt</sub> attribute-specifier-seq<sub>opt</sub> trailing-return-type<sub>opt</sub>
      <ins>mutable<sub>opt</sub> exception-specification<sub>opt</sub> attribute-specifier-seq<sub>opt</sub> trailing-return-type<sub>opt</sub></ins>
</em>
</pre>
</blockquote>


<strong> Remove from 5.1.2 [expr.prim.lambda] paragraph 4</strong>
<blockquote>
<del>If a <em>lambda-expression</em> does not include a <em>lambda-declarator</em>, it is as if the <em>lambda-declarator</em> were (). </del>
</blockquote>

<strong> Modify in 5.1.2 [expr.prim.lambda] paragraph 5</strong>
<blockquote>This function call operator or operator template is declared <code>const</code> (9.3.1) if and only if
the <del><em>lambda-expression</em>'s <em>parameter-declaration-clause</em> is not followed by</del><ins> <em>lambda-declarator</em> does not contain the keyword</ins> <code>mutable</code>. 
</blockquote>
</resolution>
</issue>
